#!/usr/bin/env ruby

require "mapp2g"
require 'bio'
require 'tempfile'
require 'optparse'


opt = OptionParser.new
OPTS = {}

begin
  #opt.banner = "Usage: #{opt.program_name} [options] QUERY GENOME "
  opt.on_tail("-v", "--version", "show version number") do
    puts Mapp2g::VERSION
    exit
  end
  opt.on("-q QUERY", "--query", "query amino acid sequences in FASTA format. REQUIRED."){|v| OPTS[:q] = v}
  opt.on("-g BLASTDB", "--genome", "genome reference as blastdb. REQUIRED."){|v| OPTS[:g] = v}
  opt.on("-o [OUTDIR]", "--outdir", "output directory. DEFAULT: mapp2g_out_{process_id}"){|v| OPTS[:o] = v}
  opt.on_tail('-h', '--help', 'show this help message and exit') do
    puts opt
    exit
  end

  if ARGV.size == 0
    puts opt
    exit
  end

  opt.parse!(ARGV)


rescue => e
  puts "ERROR: #{e}\nSee #{opt}"
  exit
end

# p OPTS

query = OPTS[:q]
genome = OPTS[:g]
outdir = (OPTS[:o] || "mapp2g_out_#{$$}")

#p [query, genome, outdir]

Dir.mkdir(outdir)

Bio::FlatFile.open(Bio::FastaFormat, query).each_with_index do |fas, i|
  tf = Tempfile.new("#{fas.entry_id}")
  tf.puts fas
  tf.close
  id = (i + 1).to_s
  query_file_path = "#{outdir}/#{id}.fasta"
  out_file_path = "#{outdir}/#{id}.exonerate.txt"
  File.open(query_file_path, "w"){|o| o.puts fas}

  mapper = Mapp2g::Mapper.new()
  res = mapper.run(query_file_path, genome)
  File.open(out_file_path, "w"){|o| o.puts res}

end
