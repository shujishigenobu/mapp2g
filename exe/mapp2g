#!/usr/bin/env ruby

#require_relative '../lib/mapp2g' # for development
require 'mapp2g'
require 'bio'
require 'tempfile'
require 'optparse'
require 'json'

### Parse options

opt = OptionParser.new
OPTS = {}

begin
  #opt.banner = "Usage: #{opt.program_name} [options] QUERY GENOME "
  opt.on_tail("-v", "--version", "show version number") do
    puts Mapp2g::VERSION
    exit
  end
  opt.on("-q QUERY", "--query", "query amino acid sequences in FASTA format. REQUIRED."){|v| OPTS[:q] = v}
  opt.on("-g BLASTDB", "--genome", "genome reference as blastdb. REQUIRED."){|v| OPTS[:g] = v}
  opt.on("-o [OUTDIR]", "--outdir", "output directory. DEFAULT: mapp2g_out_{process_id}"){|v| OPTS[:o] = v}
  opt.on_tail('-h', '--help', 'show this help message and exit') do
    puts opt
    exit
  end

  if ARGV.size == 0
    puts opt
    exit
  end

  opt.parse!(ARGV)

rescue => e
  puts "ERROR: #{e}\nSee #{opt}"
  exit
end

# p OPTS

query = OPTS[:q]
genome = OPTS[:g]
outdir = (OPTS[:o] || "mapp2g_out_#{$$}")

#p [query, genome, outdir]

### Check environment

def command?(name)
  `which #{name}`
  unless $?.success?
    raise "#{name} command not found"
  end
end

begin
  command?("exonerate")
  command?("blastn")
rescue => e
  puts "ERROR: #{e}"
  exit(1)
end

begin
  unless File.exist?(genome)
    raise "genome file (#{genome}) not found"
  end
  unless File.exist?("#{genome}.nsq") && File.exist?("#{genome}.nos")
    raise "genome is not indexed. Please run 'makeblastdb -in #{genome} -dbtype nucl -parse_seqids'"
  end
rescue => e
  puts "ERROR: #{e}"
  exit(1)
end

### Main

report_json_lines = []

Dir.mkdir(outdir)

Bio::FlatFile.open(Bio::FastaFormat, query).each_with_index do |fas, i|
  tf = Tempfile.new("#{fas.entry_id}")
  tf.puts fas
  tf.close
  id = (i + 1).to_s
  query_file_path = "#{outdir}/#{id}.fasta"
  File.open(query_file_path, "w"){|o| o.puts fas}

  mapper = Mapp2g::Mapper.new()
  res = mapper.run(query_file_path, genome)
  if res
    out_file_path = "#{outdir}/#{id}.exonerate.txt"
    File.open(out_file_path, "w"){|o| o.puts res[:exonerate_result]}
    out_file_path = "#{outdir}/#{id}.blast.txt"
    File.open(out_file_path, "w"){|o| o.puts res[:blast_result]}
    gff3 = Mapp2g::ExonerateOutput.new(res[:exonerate_result]).to_gff3()
    out_file_path = "#{outdir}/#{id}.exonerate.gff3"
    File.open(out_file_path, "w"){|o| o.puts gff3}

    report = {
      "runtime_id" => id,
      "query_id" => fas.entry_id, 
      "query_fasta" => fas.to_s,
      "exonerate" => res[:exonerate_result], 
      "blast" => res[:blast_result], 
      "gff3" => gff3
    }
    report_json_lines << report.to_json

  else
    report = {
      "runtime_id" => id,
      "query_id" => fas.entry_id,
      "query_fasta" => fas.to_s,
      "exonerate" => nil,
      "blast" => nil,
      "gff3" => nil
    }
    STDERR.puts "No hit for #{fas.entry_id}"
  end

end

report_json = report_json_lines.join("\n")
File.open("#{outdir}/report.json", "w"){|o| o.puts report_json}